  "Создать класс Money для работы с денежными суммами. Число должно\n",
    "быть представлено двумя полями: для рублей и для копеек. Копейки при\n",
    "выводе на экран должна быть отделена от целой части запятой.\n",
    "Реализовать сложение, вычитание, деление сумм, деление суммы на\n",
    "дробное число, умножение на дробное число и операции сравнения.\n",
    "\"\"\"\n",
    "class Money: # Создаём класс money\n",
    "    def __init__(self, rub, cop): # назначаем валюту\n",
    "            self.rub = rub # рубли \n",
    "            self.cop = cop # копейки\n",
    "    factor = 2.56 # пример \n",
    "    def __sub__(self, other):\n",
    "        return Money(self.rub - other.rub, self.cop - other.cop) # вычитание суммы\n",
    " \n",
    "    def subChecker(self): # назначаем условия\n",
    "        if self.cop < 0:\n",
    "            self.rub -= 1\n",
    "            self.cop = 100+self.cop\n",
    "            return self.rub, self.cop\n",
    " \n",
    "    def __add__(self, other):\n",
    "        return Money(self.rub + other.rub, self.cop + other.cop) # сложение суммы\n",
    " \n",
    "    def addChecker(self):\n",
    "        if self.cop >= 100:\n",
    "            self.rub += 1\n",
    "            self.cop -= 100\n",
    "            return self.rub, self.cop\n",
    " \n",
    "    def __mul__(self, other):\n",
    "        return Money(self.rub * other.rub, self.cop * other.cop) # умножение суммы\n",
    " \n",
    "    def mulChecker(self):\n",
    "        while self.cop >= 100:\n",
    "            self.rub += 1\n",
    "            self.cop -= 100\n",
    "        return self.rub, self.cop\n",
    " \n",
    "    def __floordiv__(self, other):\n",
    "        return Money(self.rub // other.factor, self.cop // other.factor) #деление сумм\n",
    " \n",
    "    def __itruediv__(self, other): # операции сравнение\n",
    "        self.rub /= other.factor\n",
    "        self.cop /= other.factor\n",
    "        return self\n",
    " \n",
    "    def __imul__(self, other):\n",
    "        self.rub *= other.factor\n",
    "        self.cop *= other.factor\n",
    "        return self\n",
    " \n",
    "    def __it__(self, other):\n",
    "        return self.rub < other.rub\n",
    " \n",
    "    def __eq__(self, other):\n",
    "        return self.rub == other.rub\n",
    " \n",
    "\n",
    "\n",
    "             \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "94e70abf-4e3a-47b6-a2b9-74427923ad13",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
