{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true,
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/qijok/OOOO/blob/main/%D0%9A%D0%BE%D0%BF%D0%B8%D1%8F_%D0%B1%D0%BB%D0%BE%D0%BA%D0%BD%D0%BE%D1%82%D0%B0_%22%D0%9A%D0%BE%D0%BF%D0%B8%D1%8F_%D0%B1%D0%BB%D0%BE%D0%BA%D0%BD%D0%BE%D1%82%D0%B0_%22lesson10_practice_ipynb%22%22.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 53,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GOEvQ8auO983",
        "outputId": "f68cc3a2-4510-4b0e-a860-0231c81a0739"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: sqlalchemy in /usr/local/lib/python3.11/dist-packages (2.0.37)\n",
            "Requirement already satisfied: greenlet!=0.4.17 in /usr/local/lib/python3.11/dist-packages (from sqlalchemy) (3.1.1)\n",
            "Requirement already satisfied: typing-extensions>=4.6.0 in /usr/local/lib/python3.11/dist-packages (from sqlalchemy) (4.12.2)\n"
          ]
        }
      ],
      "source": [
        "!pip install sqlalchemy"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import sqlalchemy"
      ],
      "metadata": {
        "id": "Sh6SvgMuPOiN"
      },
      "execution_count": 54,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sqlalchemy.__version__"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "eDMeBPaqPOkg",
        "outputId": "3fc89f12-b94e-40f4-cc9d-cbf503416924"
      },
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'2.0.37'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 55
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import sqlalchemy as db"
      ],
      "metadata": {
        "id": "6da8mvESPOnI"
      },
      "execution_count": 56,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "engine = db.create_engine('sqlite:///mydb.db')"
      ],
      "metadata": {
        "id": "qoSj0TfhPOqy"
      },
      "execution_count": 57,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "conn = engine.connect()"
      ],
      "metadata": {
        "id": "9eMBzNGVPOtR"
      },
      "execution_count": 58,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "metadata = db.MetaData()"
      ],
      "metadata": {
        "id": "tckacDvrPvdf"
      },
      "execution_count": 59,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dir(db)"
      ],
      "metadata": {
        "id": "MvteQKXhQ20W",
        "outputId": "1e7feef9-01fa-4585-f761-42d990c0805e",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['ARRAY',\n",
              " 'AdaptedConnection',\n",
              " 'Alias',\n",
              " 'AliasedReturnsRows',\n",
              " 'Any',\n",
              " 'AssertionPool',\n",
              " 'AsyncAdaptedQueuePool',\n",
              " 'BIGINT',\n",
              " 'BINARY',\n",
              " 'BLANK_SCHEMA',\n",
              " 'BLOB',\n",
              " 'BOOLEAN',\n",
              " 'BaseDDLElement',\n",
              " 'BaseRow',\n",
              " 'BigInteger',\n",
              " 'BinaryExpression',\n",
              " 'BindParameter',\n",
              " 'BindTyping',\n",
              " 'Boolean',\n",
              " 'BooleanClauseList',\n",
              " 'CHAR',\n",
              " 'CLOB',\n",
              " 'CTE',\n",
              " 'CacheKey',\n",
              " 'Case',\n",
              " 'Cast',\n",
              " 'CheckConstraint',\n",
              " 'ChunkedIteratorResult',\n",
              " 'ClauseElement',\n",
              " 'ClauseList',\n",
              " 'CollectionAggregate',\n",
              " 'Column',\n",
              " 'ColumnClause',\n",
              " 'ColumnCollection',\n",
              " 'ColumnDefault',\n",
              " 'ColumnElement',\n",
              " 'ColumnExpressionArgument',\n",
              " 'ColumnOperators',\n",
              " 'Compiled',\n",
              " 'CompoundSelect',\n",
              " 'Computed',\n",
              " 'Connection',\n",
              " 'Constraint',\n",
              " 'CreateEnginePlugin',\n",
              " 'CursorResult',\n",
              " 'DATE',\n",
              " 'DATETIME',\n",
              " 'DDL',\n",
              " 'DDLElement',\n",
              " 'DECIMAL',\n",
              " 'DOUBLE',\n",
              " 'DOUBLE_PRECISION',\n",
              " 'Date',\n",
              " 'DateTime',\n",
              " 'DefaultClause',\n",
              " 'Delete',\n",
              " 'Dialect',\n",
              " 'Double',\n",
              " 'Engine',\n",
              " 'Enum',\n",
              " 'ExceptionContext',\n",
              " 'Executable',\n",
              " 'ExecutableDDLElement',\n",
              " 'ExecutionContext',\n",
              " 'Exists',\n",
              " 'Extract',\n",
              " 'FLOAT',\n",
              " 'FallbackAsyncAdaptedQueuePool',\n",
              " 'False_',\n",
              " 'FetchedValue',\n",
              " 'Float',\n",
              " 'ForeignKey',\n",
              " 'ForeignKeyConstraint',\n",
              " 'FromClause',\n",
              " 'FromGrouping',\n",
              " 'FrozenResult',\n",
              " 'Function',\n",
              " 'FunctionElement',\n",
              " 'FunctionFilter',\n",
              " 'GenerativeSelect',\n",
              " 'Grouping',\n",
              " 'HasCTE',\n",
              " 'HasPrefixes',\n",
              " 'HasSuffixes',\n",
              " 'INT',\n",
              " 'INTEGER',\n",
              " 'Identity',\n",
              " 'Index',\n",
              " 'Insert',\n",
              " 'Inspector',\n",
              " 'Integer',\n",
              " 'Interval',\n",
              " 'IteratorResult',\n",
              " 'JSON',\n",
              " 'Join',\n",
              " 'LABEL_STYLE_DEFAULT',\n",
              " 'LABEL_STYLE_DISAMBIGUATE_ONLY',\n",
              " 'LABEL_STYLE_NONE',\n",
              " 'LABEL_STYLE_TABLENAME_PLUS_COL',\n",
              " 'Label',\n",
              " 'LambdaElement',\n",
              " 'LargeBinary',\n",
              " 'Lateral',\n",
              " 'MappingResult',\n",
              " 'MergedResult',\n",
              " 'MetaData',\n",
              " 'NCHAR',\n",
              " 'NUMERIC',\n",
              " 'NVARCHAR',\n",
              " 'NestedTransaction',\n",
              " 'NotNullable',\n",
              " 'Null',\n",
              " 'NullPool',\n",
              " 'Nullable',\n",
              " 'Numeric',\n",
              " 'Operators',\n",
              " 'Over',\n",
              " 'PickleType',\n",
              " 'Pool',\n",
              " 'PoolProxiedConnection',\n",
              " 'PoolResetState',\n",
              " 'PrimaryKeyConstraint',\n",
              " 'QueuePool',\n",
              " 'REAL',\n",
              " 'ReleaseSavepointClause',\n",
              " 'Result',\n",
              " 'ResultProxy',\n",
              " 'ReturnsRows',\n",
              " 'RollbackToSavepointClause',\n",
              " 'RootTransaction',\n",
              " 'Row',\n",
              " 'RowMapping',\n",
              " 'SMALLINT',\n",
              " 'SQLColumnExpression',\n",
              " 'SavepointClause',\n",
              " 'ScalarResult',\n",
              " 'ScalarSelect',\n",
              " 'Select',\n",
              " 'SelectBase',\n",
              " 'SelectLabelStyle',\n",
              " 'Selectable',\n",
              " 'Sequence',\n",
              " 'SingletonThreadPool',\n",
              " 'SmallInteger',\n",
              " 'StatementLambdaElement',\n",
              " 'StaticPool',\n",
              " 'String',\n",
              " 'Subquery',\n",
              " 'TEXT',\n",
              " 'TIME',\n",
              " 'TIMESTAMP',\n",
              " 'Table',\n",
              " 'TableClause',\n",
              " 'TableSample',\n",
              " 'TableValuedAlias',\n",
              " 'Text',\n",
              " 'TextAsFrom',\n",
              " 'TextClause',\n",
              " 'TextualSelect',\n",
              " 'Time',\n",
              " 'Transaction',\n",
              " 'True_',\n",
              " 'TryCast',\n",
              " 'Tuple',\n",
              " 'TupleType',\n",
              " 'TwoPhaseTransaction',\n",
              " 'TypeClause',\n",
              " 'TypeCoerce',\n",
              " 'TypeCompiler',\n",
              " 'TypeDecorator',\n",
              " 'URL',\n",
              " 'UUID',\n",
              " 'UnaryExpression',\n",
              " 'Unicode',\n",
              " 'UnicodeText',\n",
              " 'UniqueConstraint',\n",
              " 'Update',\n",
              " 'UpdateBase',\n",
              " 'Uuid',\n",
              " 'VARBINARY',\n",
              " 'VARCHAR',\n",
              " 'Values',\n",
              " 'ValuesBase',\n",
              " 'Visitable',\n",
              " 'WithinGroup',\n",
              " '__builtins__',\n",
              " '__cached__',\n",
              " '__doc__',\n",
              " '__file__',\n",
              " '__getattr__',\n",
              " '__go',\n",
              " '__loader__',\n",
              " '__name__',\n",
              " '__package__',\n",
              " '__path__',\n",
              " '__spec__',\n",
              " '__version__',\n",
              " '_util',\n",
              " 'alias',\n",
              " 'all_',\n",
              " 'and_',\n",
              " 'annotations',\n",
              " 'any_',\n",
              " 'asc',\n",
              " 'between',\n",
              " 'bindparam',\n",
              " 'bitwise_not',\n",
              " 'case',\n",
              " 'cast',\n",
              " 'collate',\n",
              " 'column',\n",
              " 'create_engine',\n",
              " 'create_mock_engine',\n",
              " 'create_pool_from_url',\n",
              " 'cte',\n",
              " 'custom_op',\n",
              " 'cyextension',\n",
              " 'delete',\n",
              " 'desc',\n",
              " 'dialects',\n",
              " 'distinct',\n",
              " 'engine',\n",
              " 'engine_from_config',\n",
              " 'event',\n",
              " 'exc',\n",
              " 'except_',\n",
              " 'except_all',\n",
              " 'exists',\n",
              " 'extract',\n",
              " 'false',\n",
              " 'func',\n",
              " 'funcfilter',\n",
              " 'insert',\n",
              " 'insert_sentinel',\n",
              " 'inspect',\n",
              " 'inspection',\n",
              " 'intersect',\n",
              " 'intersect_all',\n",
              " 'join',\n",
              " 'label',\n",
              " 'lambda_stmt',\n",
              " 'lateral',\n",
              " 'literal',\n",
              " 'literal_column',\n",
              " 'log',\n",
              " 'make_url',\n",
              " 'modifier',\n",
              " 'not_',\n",
              " 'null',\n",
              " 'nulls_first',\n",
              " 'nulls_last',\n",
              " 'nullsfirst',\n",
              " 'nullslast',\n",
              " 'or_',\n",
              " 'outerjoin',\n",
              " 'outparam',\n",
              " 'over',\n",
              " 'pool',\n",
              " 'quoted_name',\n",
              " 'result_tuple',\n",
              " 'schema',\n",
              " 'select',\n",
              " 'sql',\n",
              " 'table',\n",
              " 'tablesample',\n",
              " 'text',\n",
              " 'true',\n",
              " 'try_cast',\n",
              " 'tuple_',\n",
              " 'type_coerce',\n",
              " 'types',\n",
              " 'union',\n",
              " 'union_all',\n",
              " 'update',\n",
              " 'util',\n",
              " 'values',\n",
              " 'within_group']"
            ]
          },
          "metadata": {},
          "execution_count": 60
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "2Xc_FYWXz0Sl"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "metadata.create_all(engine)"
      ],
      "metadata": {
        "id": "eO6hsdb8Rbh1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "conn.execute(insertion)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SnqXyUVgYJ1a",
        "outputId": "f2567023-b84a-419a-d028-2db60e32b4cf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<sqlalchemy.engine.cursor.CursorResult at 0x7ea5401d7b60>"
            ]
          },
          "metadata": {},
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "select_all_query = db.select(cars)\n",
        "select_result = conn.execute(select_all_query)\n",
        "select_result"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lzcIUQ6YdC9q",
        "outputId": "8add5017-f8b5-4999-9d96-c1f30ca7e83a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<sqlalchemy.engine.cursor.CursorResult at 0x7ea5401d78c0>"
            ]
          },
          "metadata": {},
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "select_result.fetchall()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "slQHY4-HgL4i",
        "outputId": "2023a4b1-dd60-44ff-dfc1-d71f54086eee"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[(1, 'Audi', 'Germany', 10000, 35500),\n",
              " (2, 'BMW', 'Germany', 15600, 24500),\n",
              " (3, 'Mercedes', 'Germany', 4000, 55500)]"
            ]
          },
          "metadata": {},
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "select_all_query = db.select(cars).where(cars.columns.car_mileage > 12000)\n",
        "select_result = conn.execute(select_all_query)\n",
        "select_result.fetchall()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YZTmntxKgZHR",
        "outputId": "025a2181-c3a0-4055-d26e-7b3c3b67e31f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[(2, 'BMW', 'Germany', 15600, 24500)]"
            ]
          },
          "metadata": {},
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "insertion = cars.insert().values([\n",
        "    {'car_name': 'Lada', 'car_country': 'Russia', 'car_mileage': 1000, 'car_price': 500}\n",
        "\n",
        "])"
      ],
      "metadata": {
        "id": "vYwi6YYlgZCk"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "conn.execute(insertion)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ViiP_Kpzimkk",
        "outputId": "fa9d6d30-7024-4e5d-e9c5-07ef14eef33e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<sqlalchemy.engine.cursor.CursorResult at 0x79a72943dea0>"
            ]
          },
          "metadata": {},
          "execution_count": 55
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "select_all_query = db.select(cars)\n",
        "select_result = conn.execute(select_all_query)\n",
        "select_result.fetchall()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8cY9H2yyir-X",
        "outputId": "c867bb71-006e-43b2-e3ee-d565c2060129"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[(1, 'Audi', 'Germany', 10000, 35500),\n",
              " (2, 'BMW', 'Germany', 15600, 24500),\n",
              " (3, 'Mercedes', 'Germany', 4000, 55500),\n",
              " (4, 'Lada', 'Russia', 1000, 500),\n",
              " (5, 'Lada', 'Russia', 1000, 500)]"
            ]
          },
          "metadata": {},
          "execution_count": 56
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "update_query = db.update(cars).where(cars.columns.car_name == 'Lada').values(car_price=0)"
      ],
      "metadata": {
        "id": "8L_lkcgSklYf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "conn.execute(update_query)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "R5FBeEAdk9Zj",
        "outputId": "a7225b9d-74eb-4227-e0fb-7df04d7cf11d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<sqlalchemy.engine.cursor.CursorResult at 0x79a72943f0a0>"
            ]
          },
          "metadata": {},
          "execution_count": 58
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "select_all_qiery = db.select(cars)\n",
        "select_result = conn.execute(select_all_query)\n",
        "select_result.fetchall()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jlrPhLj7lKWF",
        "outputId": "a537c0fc-4225-46e4-ced4-12c92607822d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[(1, 'Audi', 'Germany', 10000, 35500),\n",
              " (2, 'BMW', 'Germany', 15600, 24500),\n",
              " (3, 'Mercedes', 'Germany', 4000, 55500),\n",
              " (4, 'Lada', 'Russia', 1000, 0),\n",
              " (5, 'Lada', 'Russia', 1000, 0)]"
            ]
          },
          "metadata": {},
          "execution_count": 59
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "delete_qiery = db.delete(cars).where(cars.columns.car_name == 'Lada')\n",
        "conn.execute(delete_query)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uF2PmBtUlQFr",
        "outputId": "ba789ea4-67da-4943-d30a-4d2774a34156"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<sqlalchemy.engine.cursor.CursorResult at 0x79a72943e740>"
            ]
          },
          "metadata": {},
          "execution_count": 60
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "select_all_qiery = db.select(cars)\n",
        "select_result = conn.execute(select_all_query)\n",
        "select_result.fetchall()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IBBRlMKIlwXG",
        "outputId": "767431c3-82bf-4777-8467-6132cfeffc1c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[(1, 'Audi', 'Germany', 10000, 35500),\n",
              " (2, 'BMW', 'Germany', 15600, 24500),\n",
              " (3, 'Mercedes', 'Germany', 4000, 55500)]"
            ]
          },
          "metadata": {},
          "execution_count": 61
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "LuzqQG4fHOvv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# with\n",
        "#   idx as (\n",
        "#         select distinct id\n",
        "#         from A\n",
        "#       )\n",
        "select *\n",
        "from A where id in ((\n",
        "        select distinct id\n",
        "        from A\n",
        "      ))\n",
        "join B  where id in (\n",
        "    (\n",
        "        select distinct id\n",
        "        from A\n",
        "      )\n",
        ")\n",
        "on\n",
        "  )"
      ],
      "metadata": {
        "id": "SWwcghLXHOr9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 106
        },
        "outputId": "bf6b7762-96c2-4eaa-c060-0b7113831330"
      },
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "unmatched ')' (<ipython-input-61-108d87966690>, line 18)",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-61-108d87966690>\"\u001b[0;36m, line \u001b[0;32m18\u001b[0m\n\u001b[0;31m    )\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m unmatched ')'\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "O9cUldHaz1it"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#создаём таблицу и четыре колонки\n",
        "animals = db.Table(\n",
        "    'animals', metadata,\n",
        "    db.Column('animals_id', db.Integer, primary_key=True),\n",
        "    db.Column('animals_name', db.Text,),\n",
        "    db.Column('animals_country', db.Text),\n",
        "    db.Column('animals_size', db.Integer),\n",
        ")\n",
        "animals"
      ],
      "metadata": {
        "id": "SLEh39tuz2GN",
        "outputId": "97bef9c3-8fdd-4a8a-a763-dd8e3a79c20c",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 62,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Table('animals', MetaData(), Column('animals_id', Integer(), table=<animals>, primary_key=True, nullable=False), Column('animals_name', Text(), table=<animals>), Column('animals_country', Text(), table=<animals>), Column('animals_size', Integer(), table=<animals>), schema=None)"
            ]
          },
          "metadata": {},
          "execution_count": 62
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "metadata.create_all(engine)"
      ],
      "metadata": {
        "id": "IfaltHzGz2Nt"
      },
      "execution_count": 63,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#наполняем таблицу\n",
        "insertion = animals.insert().values([\n",
        "    {'animals_name': 'kangaroo', 'animals_country': 'Australia', 'animals_size': 'midle'},\n",
        "    {'animals_name': 'grizzly', 'animals_country': 'U.S.A.', 'animals_size': 'big'},\n",
        "    {'animals_name': 'panda', 'animals_country': 'Chine', 'animals_size': 'small'}\n",
        "\n",
        "])"
      ],
      "metadata": {
        "id": "naStCfDI15-I"
      },
      "execution_count": 64,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "conn.execute(insertion)"
      ],
      "metadata": {
        "id": "jnFycLVDz2TN",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 530
        },
        "outputId": "d8661d1a-b34f-4e2c-87d0-13f26a5ee9a7"
      },
      "execution_count": 68,
      "outputs": [
        {
          "output_type": "error",
          "ename": "OperationalError",
          "evalue": "(sqlite3.OperationalError) database is locked\n[SQL: INSERT INTO animals (animals_name, animals_country, animals_size) VALUES (?, ?, ?), (?, ?, ?), (?, ?, ?)]\n[parameters: ('kangaroo', 'Australia', 'midle', 'grizzly', 'U.S.A.', 'big', 'panda', 'Chine', 'small')]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mOperationalError\u001b[0m                          Traceback (most recent call last)",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sqlalchemy/engine/base.py\u001b[0m in \u001b[0;36m_exec_single_context\u001b[0;34m(self, dialect, context, statement, parameters)\u001b[0m\n\u001b[1;32m   1963\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mevt_handled\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1964\u001b[0;31m                     self.dialect.do_execute(\n\u001b[0m\u001b[1;32m   1965\u001b[0m                         \u001b[0mcursor\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstr_statement\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0meffective_parameters\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcontext\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sqlalchemy/engine/default.py\u001b[0m in \u001b[0;36mdo_execute\u001b[0;34m(self, cursor, statement, parameters, context)\u001b[0m\n\u001b[1;32m    941\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mdo_execute\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcursor\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstatement\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparameters\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcontext\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 942\u001b[0;31m         \u001b[0mcursor\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexecute\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstatement\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparameters\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    943\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mOperationalError\u001b[0m: database is locked",
            "\nThe above exception was the direct cause of the following exception:\n",
            "\u001b[0;31mOperationalError\u001b[0m                          Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-68-ff414b547f5a>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mconn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexecute\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minsertion\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sqlalchemy/engine/base.py\u001b[0m in \u001b[0;36mexecute\u001b[0;34m(self, statement, parameters, execution_options)\u001b[0m\n\u001b[1;32m   1414\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mexc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mObjectNotExecutableError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstatement\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1415\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1416\u001b[0;31m             return meth(\n\u001b[0m\u001b[1;32m   1417\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1418\u001b[0m                 \u001b[0mdistilled_parameters\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sqlalchemy/sql/elements.py\u001b[0m in \u001b[0;36m_execute_on_connection\u001b[0;34m(self, connection, distilled_params, execution_options)\u001b[0m\n\u001b[1;32m    513\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mTYPE_CHECKING\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    514\u001b[0m                 \u001b[0;32massert\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mExecutable\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 515\u001b[0;31m             return connection._execute_clauseelement(\n\u001b[0m\u001b[1;32m    516\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdistilled_params\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexecution_options\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    517\u001b[0m             )\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sqlalchemy/engine/base.py\u001b[0m in \u001b[0;36m_execute_clauseelement\u001b[0;34m(self, elem, distilled_parameters, execution_options)\u001b[0m\n\u001b[1;32m   1636\u001b[0m             \u001b[0mlinting\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdialect\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcompiler_linting\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0mcompiler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mWARN_LINTING\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1637\u001b[0m         )\n\u001b[0;32m-> 1638\u001b[0;31m         ret = self._execute_context(\n\u001b[0m\u001b[1;32m   1639\u001b[0m             \u001b[0mdialect\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1640\u001b[0m             \u001b[0mdialect\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexecution_ctx_cls\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_init_compiled\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sqlalchemy/engine/base.py\u001b[0m in \u001b[0;36m_execute_context\u001b[0;34m(self, dialect, constructor, statement, parameters, execution_options, *args, **kw)\u001b[0m\n\u001b[1;32m   1841\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_exec_insertmany_context\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdialect\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcontext\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1842\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1843\u001b[0;31m             return self._exec_single_context(\n\u001b[0m\u001b[1;32m   1844\u001b[0m                 \u001b[0mdialect\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcontext\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstatement\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparameters\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1845\u001b[0m             )\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sqlalchemy/engine/base.py\u001b[0m in \u001b[0;36m_exec_single_context\u001b[0;34m(self, dialect, context, statement, parameters)\u001b[0m\n\u001b[1;32m   1981\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1982\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mBaseException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1983\u001b[0;31m             self._handle_dbapi_exception(\n\u001b[0m\u001b[1;32m   1984\u001b[0m                 \u001b[0me\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstr_statement\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0meffective_parameters\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcursor\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcontext\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1985\u001b[0m             )\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sqlalchemy/engine/base.py\u001b[0m in \u001b[0;36m_handle_dbapi_exception\u001b[0;34m(self, e, statement, parameters, cursor, context, is_sub_exec)\u001b[0m\n\u001b[1;32m   2350\u001b[0m             \u001b[0;32melif\u001b[0m \u001b[0mshould_wrap\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2351\u001b[0m                 \u001b[0;32massert\u001b[0m \u001b[0msqlalchemy_exception\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2352\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0msqlalchemy_exception\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwith_traceback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mexc_info\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2353\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2354\u001b[0m                 \u001b[0;32massert\u001b[0m \u001b[0mexc_info\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sqlalchemy/engine/base.py\u001b[0m in \u001b[0;36m_exec_single_context\u001b[0;34m(self, dialect, context, statement, parameters)\u001b[0m\n\u001b[1;32m   1962\u001b[0m                             \u001b[0;32mbreak\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1963\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mevt_handled\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1964\u001b[0;31m                     self.dialect.do_execute(\n\u001b[0m\u001b[1;32m   1965\u001b[0m                         \u001b[0mcursor\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstr_statement\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0meffective_parameters\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcontext\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1966\u001b[0m                     )\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sqlalchemy/engine/default.py\u001b[0m in \u001b[0;36mdo_execute\u001b[0;34m(self, cursor, statement, parameters, context)\u001b[0m\n\u001b[1;32m    940\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    941\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mdo_execute\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcursor\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstatement\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparameters\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcontext\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 942\u001b[0;31m         \u001b[0mcursor\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexecute\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstatement\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparameters\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    943\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    944\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mdo_execute_no_params\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcursor\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstatement\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcontext\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mOperationalError\u001b[0m: (sqlite3.OperationalError) database is locked\n[SQL: INSERT INTO animals (animals_name, animals_country, animals_size) VALUES (?, ?, ?), (?, ?, ?), (?, ?, ?)]\n[parameters: ('kangaroo', 'Australia', 'midle', 'grizzly', 'U.S.A.', 'big', 'panda', 'Chine', 'small')]\n(Background on this error at: https://sqlalche.me/e/20/e3q8)"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "ls0LTWSS3tCO"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7d5d5c50-da71-435e-ea2b-9ec67873423b",
        "id": "xT-sVN__6pMv"
      },
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<sqlalchemy.engine.cursor.CursorResult at 0x7ea50f496900>"
            ]
          },
          "metadata": {},
          "execution_count": 66
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "select_result.fetchall()"
      ],
      "metadata": {
        "id": "AQ3dXhGxz2YN",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "70ad8f91-b73a-4c92-f063-6c6075595bcf"
      },
      "execution_count": 67,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[]"
            ]
          },
          "metadata": {},
          "execution_count": 67
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "PVVQ2ONd9ZiR"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
